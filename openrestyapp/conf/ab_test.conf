# 流量复制

location /test1 {
    keepalive_timeout 60s;
    keepalive_requests 1000;
    content_by_lua '
        local prt_arg = "null"
        if ngx.req.get_uri_args()["a"] ~= nil then
            ngx.log(ngx.NOTICE, "assgin key a")
            prt_arg = ngx.req.get_uri_args()["a"]
        end
        if ngx.req.get_uri_args()["ab_key"] ~= nil then
            ngx.log(ngx.NOTICE, "assgin key ab_key")
            prt_arg = ngx.req.get_uri_args()["ab_key"]
        end

        ngx.log(ngx.NOTICE, "request test1")
        ngx.print("test1 : ", prt_arg)
    ';
}

location /test2 {
    keepalive_timeout 60s;
    keepalive_requests 1000;
    content_by_lua '
        local prt_arg = "null"
        if ngx.req.get_uri_args()["a"] ~= nil then
            ngx.log(ngx.NOTICE, "assgin key a")
            prt_arg = ngx.req.get_uri_args()["a"]
        end
        if ngx.req.get_uri_args()["ab_key"] ~= nil then
            ngx.log(ngx.NOTICE, "assgin key ab_key")
            prt_arg = ngx.req.get_uri_args()["ab_key"]
        end

        ngx.log(ngx.NOTICE, "request test2")
        ngx.print("test2 : ", prt_arg)
    ';
}

location /test {
    lua_socket_connect_timeout 3s;
    lua_socket_send_timeout 3s;
    lua_socket_read_timeout 3s;
    lua_socket_pool_size 100;
    lua_socket_keepalive_timeout 60s;
    lua_socket_buffer_size 8k;
    content_by_lua '
        local res1, res2 = ngx.location.capture_multi{
            { "/test1", { args = ngx.req.get_uri_args() } },
            { "/test2", { args = ngx.req.get_uri_args() } },
        }
        if res1.status == ngx.HTTP_OK then
            ngx.say(res1.body)
        end
        if res2.status ~= ngx.HTTP_OK then
           ngx.log(ngx.ERR, "capture dataflow to /test2, ret error code: ", res2.status)
        else
           ngx.say(res2.body)
        end
    ';
}

# AB测试

# 1. by map
location /abtest1 {
    if ($ab_key = "1") {
        echo_location /test1 "ab_key=$ab_key";
    }
    if ($ab_key = "0") {
        echo_location /test2 "ab_key=$ab_key";
    }
}

# 2. by lua
location /abtest2 {
    content_by_lua '
        local ck = require("cookie")
        local cookie = ck:new()
        local jda = cookie:get("__jda")

        local ab_key = "0"
        if jda then
            local v = ngx.re.match(jda, "(1|3|5)$")
            if v then
               ab_key = "1"
            end
        end

        if ab_key == "1" then
            ngx.exec("/test1", ngx.var.args)
        else
            ngx.print(ngx.location.capture("/test2", {args = ngx.req.get_uri_args()}).body)
        end
    ';
}
