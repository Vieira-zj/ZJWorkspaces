#!groovy
def GIT_URL                     = 'ssh://gitlab@git.test.com:1212/core-services/test_server.git'
def GIT_BRANCH_MASTER           = 'master'
def PROJECT_DIR                 = 'project'
def OUTPUT_DIR                  = 'output'
def TMP_DIR                     = '/tmp/test_jenkins/'
def RELEASE_TAG_FILE            = TMP_DIR + 'release_tag'
def NODE_TEST                  = 'slave1'

def PRJ_PREPARE_JIRA            = 'sub_create_release_ticket'
def PRJ_REBASE_BRANCHES         = 'sub_rebase_branch'
def PRJ_GET_RELEASE_JOBS        = 'sub_get_deploy_jobs'
def PRJ_LIVE_STAGING_EMAIL      = 'sub_send_live_staging_email'
def PRJ_PUSH_UAT_BRANCH         = 'sub_push_to_uat'
def PRJ_SEND_WECHAT             = 'sub_send_wechat_notification'

def DEBUG                       = false
def REBASE_BRANCHES             = false
def RELEASE_TAG                 = ''
def JIRA_RELEASE_TICKET         = ''
def JENKINS_JOBS                = []
def DEPLOY_JOB                  = ''
def RELEASE_JOB_FILE            = ''
def RELEASE_UAT_JOB_FILE        = ''
def ERROR_MSG                   = ''
def MSG                         = ''

stage('Create release ticket') {
    FIX_VERSION = FIX_VERSION.replaceAll("[^a-zA-Z0-9_.-]+", "")
    def user_input = input(message: 'Please input release tag', parameters: [string(defaultValue: FIX_VERSION, description: 'Please input the release tag for this release' , name: 'RELEASE_TAG'),booleanParam(defaultValue: false, description: 'create release ticket?', name: 'yes')], submitterParameter: 'SUBMITTER_RELEASE_TAG')
    RELEASE_TAG = user_input['RELEASE_TAG']
    CREATE_RELEASE_TICKET = user_input['yes']
    println 'RELEASE_TAG: ' + RELEASE_TAG
    println 'TICKETS_TO_RELEASE: ' + TICKETS_TO_RELEASE
    println 'FIX_VERSION: ' + FIX_VERSION
    currentBuild.displayName = currentBuild.displayName + '-' + RELEASE_TAG + '-' + REGION

    if (CREATE_RELEASE_TICKET) {
        jira_job = build job: PRJ_PREPARE_JIRA, parameters: [
            string(name: 'RELEASE_TAG', value: RELEASE_TAG),
            string(name: 'TICKETS_TO_RELEASE', value: TICKETS_TO_RELEASE),
            string(name: 'JIRA_ASSIGNEE', value: JIRA_ASSIGNEE),
            string(name: 'REGION', value: REGION),
            string(name: 'DEPLOY_BY_PM_TASK', value: DEPLOY_BY_PM_TASK),
            string(name: 'FIX_VERSION', value: FIX_VERSION),
            string(name: 'PROJECT', value: PROJECT),
            string(name: 'APPROVERS', value: APPROVERS)
        ], quietPeriod: 0
    }

    node(NODE_TEST) {
        step([$class: 'CopyArtifact', filter: 'release_jira.txt', projectName: PRJ_PREPARE_JIRA])
        JIRA_RELEASE_TICKET = readFile('release_jira.txt').trim()
    }
    println 'JIRA_RELEASE_TICKET: ' + JIRA_RELEASE_TICKET
}

stage('Rebase branches') {
    def user_input = input(message: 'Auto rebase all branches in release ticket?', parameters: [booleanParam(defaultValue: false, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_REBASE_BRANCH')
    while (user_input['yes']) {
        println 'Run auto rebase'
        build job: PRJ_REBASE_BRANCHES, parameters: [
            string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
            string(name: 'RELEASE_TAG', value: RELEASE_TAG),
            string(name: 'PROJECT', value: PROJECT)
        ], quietPeriod: 0, propagate: false
        user_input = input(message: 'Auto rebase all branches in release ticket?', parameters: [booleanParam(defaultValue: false, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_REBASE_BRANCH')
    }
}

stage('Remove invalid tickets') {
    def user_input = input(message: 'remove invalid jira?', parameters: [booleanParam(defaultValue: false, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_REBASE_BRANCH')
    REMOVE = user_input['yes']
    if (REMOVE) {
        println 'remove invalid jira'
        build job: 'apa_remove_invalid_jira', parameters: [
            string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
            string(name: 'RELEASE_TAG', value: RELEASE_TAG),
        ], quietPeriod: 0, propagate: false

        println 'Create release_job file'
        build job: PRJ_GET_RELEASE_JOBS, parameters: [
            string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
            string(name: 'RELEASE_TAG', value: RELEASE_TAG),
        ], quietPeriod: 0, propagate: false
    }

    node(NODE_TEST) {
        RELEASE_UAT_JOB_FILE = TMP_DIR + 'release_uat_job' + RELEASE_TAG
        RELEASE_JOB_FILE = TMP_DIR + 'release_job' + RELEASE_TAG
        out = sh(script:"ls $RELEASE_JOB_FILE", returnStatus:true)
        if(out == 0) {
            println "file is exist"
        } else if(out == 2) {
            println 'Create release_job file'
            build job: PRJ_GET_RELEASE_JOBS, parameters: [
                string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
                string(name: 'RELEASE_TAG', value: RELEASE_TAG),
            ], quietPeriod: 0, propagate: false
        }
        JENKINS_UAT_JOBS = readFile(RELEASE_UAT_JOB_FILE).split(',')
        println 'JENKINS_UAT_JOBS: '+ JENKINS_UAT_JOBS
        JENKINS_JOBS = readFile(RELEASE_JOB_FILE).split(',')
        println 'JENKINS_JOBS: '+ JENKINS_JOBS
    }
    println 'JENKINS_JOBS: '+ JENKINS_JOBS
}

stage('Push UAT branch') {
    def user_input = input(message: 'merge feature to uat branch?', parameters: [booleanParam(defaultValue: false, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_PUSH_UAT_BRANCH')
    if (!DEBUG) {
        while (user_input['yes']) {
            build job: PRJ_PUSH_UAT_BRANCH, parameters: [
                string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
                string(name: 'RELEASE_TAG', value: RELEASE_TAG),
                string(name: 'ENVIRONMENT', value: 'uat'),
                string(name: 'PROJECT', value: PROJECT)
            ], quietPeriod: 0, propagate: false
            user_input = input(message: 'merge feature to uat branch?', parameters: [booleanParam(defaultValue: false, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_PUSH_UAT_BRANCH')
        }
    }
}

def deploy_a_service_job(JOB, REGION, WAIT, ENV) {
	results = build job: JOB, parameters: [
	    string(name: 'APPTYPE', value: 'apa'),
        string(name: 'ENVIRONMENT', value: ENV),
        string(name: 'REGION', value: REGION),
        string(name: 'BRANCH', value: 'uat')
    ], quietPeriod: 0, propagate: false, wait: WAIT
    return results
}

def deploy_multiple_service_jobs(JOBS, REGION, ENV) {
    def branches = [:]
    def result = [:]
    def build_success = []
    def build_fail = []
    for(int i=0; i<JOBS.size(); i++) {
        def JOB = JOBS[i]
        println("deploy $JOB to livestaging")
        branches[JOB] = {
            try {
                result[JOB] = deploy_a_service_job(JOB, REGION, true, ENV)
                if(result[JOB].currentResult == "SUCCESS") {
                    build_success.add("BUILD SUCCESS: [$JOB]")
                } else {
                    build_fail.add("BUILD FAIL: [$JOB] ${result[JOB].currentResult}")
                }
            } catch(Exception ex) {
                build_fail.add("BUILD FAIL: [$JOB] and have error: ${ex.getMessage()}")
                println("BUILD FAIL: [$JOB], Catching the exception:" + ex)
            }
        }
    }
    // 并行执行所有job
    timestamps {
        parallel branches
    }
    println build_success.join('\n')
    println build_fail.join('\n')
    build_result = build_success + build_fail
    return build_result.join('\n')
}

stage('Deploy to UAT') {
    def continue_input = input(message: 'Ready to deploy uat?', parameters: [booleanParam(defaultValue: false, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_PUSH_UAT_BRANCH')
    PUSH_UAT = continue_input['yes']
    node(NODE_TEST) {
        RELEASE_UAT_JOB_FILE = TMP_DIR + 'release_uat_job' + RELEASE_TAG
        RELEASE_JOB_FILE = TMP_DIR + 'release_job' + RELEASE_TAG
        out=sh(script:"ls $RELEASE_JOB_FILE", returnStatus:true)
        if(out == 0) {
            println "file is exist"
        } else if(out == 2) {
            println 'Create release_job file'
            build job: PRJ_GET_RELEASE_JOBS, parameters: [
                string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
                string(name: 'RELEASE_TAG', value: RELEASE_TAG),
            ], quietPeriod: 0, propagate: false
        }
        JENKINS_UAT_JOBS = readFile(RELEASE_UAT_JOB_FILE).split(',')
        println 'JENKINS_UAT_JOBS: '+ JENKINS_UAT_JOBS
        JENKINS_JOBS = readFile(RELEASE_JOB_FILE).split(',')
        println 'JENKINS_JOBS: '+ JENKINS_JOBS
    }
    println 'JENKINS_JOBS: '+ JENKINS_JOBS

    ENV = 'uat'
    JOBS = new ArrayList(Arrays.asList(JENKINS_UAT_JOBS))
    def user_input = input(message: 'Confirm project to deploy new uat', parameters: [choice(name: 'project', choices: JOBS, description: ''),booleanParam(defaultValue: false, description: '', name: 'deploy_all'),booleanParam(defaultValue: false, description: '', name: 'yes')])
    DEPLOY_UAT = user_input['yes']
    DEPLOY_JOB = user_input['project']
    DEPLOY_ALL = user_input['deploy_all']
    println 'choice ' + DEPLOY_JOB
    if (DEPLOY_ALL && DEPLOY_UAT) {
        MSG = deploy_multiple_service_jobs(JOBS, REGION, ENV)
        try {
            build job: 'apa_deploy_check_jira_status', parameters: [string(name: 'BUILD_RESULT', value: MSG),string(name: 'RELEASE_TAG', value: RELEASE_TAG),string(name: 'REGION', value: REGION),string(name: 'ENV', value: ENV),string(name: 'FEATURES', value: 'notify_deploy_result')], quietPeriod: 0, propagate: false
        } catch(Exception ex) {
            println("Catching the exception:" + ex)
        }
    } else if (DEPLOY_UAT) {
        while (DEPLOY_UAT && JOBS.size()>0) {
            println "deploying $DEPLOY_JOB to uat"
            try{
                deploy_a_service_job(DEPLOY_JOB, REGION, false, ENV)
            } catch(Exception ex) {
                println("BUILD FAIL: [$JOB], Catching the exception:" + ex)
            }
            JOBS.remove(DEPLOY_JOB)
            if(JOBS.size()>0) {
                println "waitting input uat"
                JOBS = input(message: 'Confirm project to deploy new uat', parameters: [choice(name: 'project', choices: NEED_DEPLOY, description: ''),booleanParam(defaultValue: false, description: '', name: 'yes')])
                DEPLOY_UAT = user_input['yes']
                DEPLOY_JOB = user_input['project']
                println 'choice ' + DEPLOY_JOB
            }
        }
    }
}

stage('Deploy to livestaging') {
    ENV = 'livestaging'
    JOBS = new ArrayList(Arrays.asList(JENKINS_UAT_JOBS))
    def user_input = input(message: 'Confirm project to deploy new livestaging', parameters: [choice(name: 'project', choices: JOBS, description: ''),booleanParam(defaultValue: false, description: '', name: 'deploy_all'),booleanParam(defaultValue: false, description: '', name: 'yes')])
    DEPLOY_UAT = user_input['yes']
    DEPLOY_JOB = user_input['project']
    DEPLOY_ALL = user_input['deploy_all']
    println 'choice ' + DEPLOY_JOB
    if (DEPLOY_ALL && DEPLOY_UAT) {
        MSG = deploy_multiple_service_jobs(JOBS, REGION, ENV)
        try {
            build job: 'apa_deploy_check_jira_status', parameters: [string(name: 'BUILD_RESULT', value: MSG),string(name: 'RELEASE_TAG', value: RELEASE_TAG),string(name: 'REGION', value: REGION),string(name: 'ENV', value: ENV),string(name: 'FEATURES', value: 'notify_deploy_result')], quietPeriod: 0, propagate: false
        } catch(Exception ex) {
            println("Catching the exception:" + ex)
        }
    }else if (DEPLOY_UAT) {
        while (DEPLOY_UAT && JOBS.size()>0) {
            println "deploying $DEPLOY_JOB to livestaging"
            try {
                deploy_a_service_job(DEPLOY_JOB, REGION, false, ENV)
            } catch(Exception ex) {
                println("BUILD FAIL: [$JOB], Catching the exception:" + ex)
            }
            JOBS.remove(DEPLOY_JOB)
            if (JOBS.size()>0) {
                println "waitting input livestaging"
                user_input = input(message: 'Confirm project to deploy new livestaging', parameters: [choice(name: 'project', choices: JOBS, description: ''),booleanParam(defaultValue: false, description: '', name: 'yes')])
                DEPLOY_UAT = user_input['yes']
                DEPLOY_JOB = user_input['project']
                println 'choice ' + DEPLOY_JOB
            }
        }
    }
}

stage('Change jira to staging') {
    user_input = input(message: 'do you want to jira status to staging?', parameters: [booleanParam(defaultValue: true, description: '', name: 'yes')], submitterParameter: 'SUBMITTER_PUSH_UAT_BRANCH')
    CHANGE = user_input['yes']
    if (CHANGE) {
        build job: 'beepay_deploy_change_jira_status', parameters: [
            string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET),
            string(name: 'CHANGE_TO', value: 'change_to_staging'),
        ], quietPeriod: 0, propagate: false
    }
}

stage('Send email and wechat') {
    user_input = input(message: 'do you want to send uat email?', parameters: [booleanParam(defaultValue: true, description: '', name: 'send_email')], submitterParameter: 'SUBMITTER_PUSH_UAT_BRANCH')
    SEND_EMAIL = user_input['send_email']
    if (SEND_EMAIL) {
        build job: PRJ_LIVE_STAGING_EMAIL, parameters: [
            string(name: 'PROJECT', value: PROJECT),
            string(name: 'REGION', value: REGION),
            string(name: 'RELEASE_TAG', value: RELEASE_TAG)
        ], quietPeriod: 0, propagate: false
    }

    user_input = input(message: 'do you want to send send wechat?', parameters: [booleanParam(defaultValue: false, description: '', name: 'send_wechat')], submitterParameter: 'SUBMITTER_PUSH_UAT_BRANCH')
    SEND_WECHAT = user_input['send_wechat']
    if (SEND_WECHAT) {
        println 'JIRA_RELEASE_TICKET: '+JIRA_RELEASE_TICKET
        build job: PRJ_SEND_WECHAT, parameters: [
                    string(name: 'REGION', value: REGION),
                    string(name: 'RELEASE_TAG', value: RELEASE_TAG),
                    string(name: 'OPTIONS', value: 'uat_test_msg'),
                    string(name: 'PROJECT', value: PROJECT),
                    string(name: 'JIRA_RELEASE_TICKET', value: JIRA_RELEASE_TICKET)
                ], quietPeriod: 0
    }
}
